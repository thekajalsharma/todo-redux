import React from 'react';
import { connect } from 'react-redux';

//AddTodo isn't clearly a presentational or container component but is relying on store for dispatching
//an action. Instead of reading dispatch from context, refactoring it to read it from props. Will create a 
//container component using connect that will inject dispatch function as a prop. Will remove 
//`AddTodo.contextTypes` because the component generated by the `connect()` function will take care of 
//reading the store from the context.


let AddTodo = ({ dispatch }) => {
    let nextTodoId = 2;
    return (<div>
        <input ref={(node) => this.inputText = node} />
        <button onClick={() => {
            dispatch({
                type: 'ADD_TO_DO',
                id: nextTodoId++,
                text: this.inputText.value
            })
            this.inputText.value = '';
        }} />
    </div>
    );
};

// AddTodo = connect(
//     state => {
//         return {};
//     },
//     dispatch => {
//         return { dispatch };
//     }
// )(AddTodo);



//It's a common pattern to inject just the `dispatch` function, so if `connect()` sees that the 
//second argument is `null` (or any falsey value), `dispatch` will be injected as a prop.
//Now the default behavior to not subscribe to the store, and inject `dispatch` as a prop.

AddTodo = connect()(AddTodo);
export default AddTodo;